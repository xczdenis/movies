x-base-service: &base-service
    platform: ${DOCKER_IMG_PLATFORM:-linux/amd64}
    restart: on-failure

x-common-healthcheck: &common-healthcheck
    interval: 3s
    timeout: 2s
    retries: 20

services:
    adminpanel_proxy:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/${ADMINPANEL_PKG_NAME}/nginx/Dockerfile
            args:
                - img=${NGINX_IMG}
        environment:
            ADMINPANEL_APP_HOST: adminpanel
            ADMINPANEL_APP_PORT: 8000
            ADMINPANEL_APP_LISTEN_PORT: 8000
        volumes:
            - ./docker/${ADMINPANEL_PKG_NAME}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./docker/${ADMINPANEL_PKG_NAME}/nginx/templates:/etc/nginx/templates:ro
            - adminpanel-static:/static
        depends_on:
            adminpanel:
                condition: service_healthy
        profiles:
            - default
            - adminpanel

    adminpanel:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/${ADMINPANEL_PKG_NAME}/Dockerfile
            args:
                - img=${PYTHON_IMG}
                - work_dir=${CONTAINER_WORK_DIR}
                - pck_name=${ADMINPANEL_PKG_NAME}
        env_file: .env
        restart: on-failure
        environment:
            ENVIRONMENT: ${ENVIRONMENT:-production}
            ADMINPANEL_APP_HOST: 0.0.0.0
            ADMINPANEL_APP_PORT: 8000
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
        volumes:
            - adminpanel-static:/${CONTAINER_WORK_DIR}/src/${ADMINPANEL_PKG_NAME}/staticfiles
        healthcheck:
            test: [ "CMD", "./scripts/wait-for-it.sh", "adminpanel:8000" ]
            <<: *common-healthcheck
        depends_on:
            postgres:
                condition: service_healthy
        profiles:
            - default
            - adminpanel

    content_proxy:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/${CONTENT_PKG_NAME}/nginx/Dockerfile
            args:
                - img=${NGINX_IMG}
        environment:
            CONTENT_APP_HOST: content
            CONTENT_APP_PORT: 8000
            CONTENT_APP_LISTEN_PORT: 8000
        volumes:
            - ./docker/${CONTENT_PKG_NAME}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./docker/${CONTENT_PKG_NAME}/nginx/templates:/etc/nginx/templates:ro
        depends_on:
            content:
                condition: service_healthy
        profiles:
            - default
            - content

    content:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/${CONTENT_PKG_NAME}/Dockerfile
            args:
                - img=${PYTHON_IMG}
                - work_dir=${CONTAINER_WORK_DIR}
                - pck_name=${CONTENT_PKG_NAME}
        env_file: .env
        environment:
            ENVIRONMENT: ${ENVIRONMENT:-production}
            CONTENT_APP_HOST: 0.0.0.0
            CONTENT_APP_PORT: 8000
            REDIS_HOST: redis
            REDIS_PORT: 6379
            ELASTIC_HOST: elasticsearch
            ELASTIC_PORT: 9200
        healthcheck:
            test: [ "CMD", "./scripts/wait-for-it.sh", "content:8000" ]
            <<: *common-healthcheck
        depends_on:
            elasticsearch:
                condition: service_healthy
            redis:
                condition: service_started
        profiles:
            - default
            - content

    postgres:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/postgres/Dockerfile
            args:
                - img=${POSTGRES_IMG}
        env_file: .env
        healthcheck:
            test: [ "CMD", "./scripts/wait-for-it.sh", "postgres:5432" ]
            <<: *common-healthcheck
        profiles:
            - default
            - adminpanel
            - etl

    elasticsearch:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/elasticsearch/Dockerfile
            args:
                - img=${ELASTICSEARCH_IMG}
        env_file: .env
        environment:
            discovery.type: single-node
            xpack.security.enabled: "false"
            ELASTIC_USER: elastic
            ELASTIC_PASSWORD: 123qwe
        healthcheck:
            test: [ "CMD", "./scripts/wait-for-it.sh", "elasticsearch:9200" ]
            <<: *common-healthcheck
        profiles:
            - default
            - content
            - etl

    redis:
        <<: *base-service
        build:
            context: .
            dockerfile: ./docker/redis/Dockerfile
            args:
                - img=${REDIS_IMG}
        profiles:
            - default
            - content
            - etl

volumes:
    adminpanel-static:
